//generic imports
importClass(Packages.ij.IJ);
importClass(Packages.ij.plugin.frame.RoiManager);
importClass(Packages.ij.gui.GenericDialog);
//generic image variable assignment
imp = IJ.getImage();
ip = imp.getProcessor();
//recursive bounding box function
function recursiveSelect(startX, startY) {
    //create dialog box
    if (startX == null || startY == null) {
        title = "Enter point";
        y=imp.height/2; x=imp.width/2;
        gd = new GenericDialog("Example Dialog");
        gd.addNumericField("X:", x);
        gd.addNumericField("Y:", y);
        gd.showDialog();
        x = gd.getNextNumber();
        y = gd.getNextNumber();
    } else {
        x = startX;
        y = startY;
    }
    //recursive function to fill in bounding box
    recursiveFill([x], [y]);
}
//recursive function to fill in bounding box
function recursiveFill(x, y) {
    for (j = 1; j <= x.length; j++) {
        IJ.log(j)
        //check if pixel is white
        if (ip.get(x[j], y[j]) < 250) {
            IJ.log("Starting point is not a white pixel (value >= 250)");
            IJ.log(ip.get(x[j], y[j]));
            break;
        }
        //check if pixel is already checked
        if (checkedList.indexOf([x[j], y[j]]) !== -1) {
            break;
        }
        //add point to list of checked points
        checkedList.push([x[j], y[j]]);
        //fill in pixel
        ip.set(x[j], y[j], 128);
        //update point variables if the value is more extreem than the current value
        IJ.log(x[j], y[j])
        if (x[j] > px) {
            px = x[j];
        }
        if (x[j] < nx) {
            nx = x[j];
        }
        if (y[j] > py) {
            py = y[j];
        }
        if (y[j] < ny) {
            ny = y[j];
        }
    }
    recursiveFill([x+1, x-1], [y+1, y-1])

}
//function to output image index number to append to log message
function imageIndex(number){
    return[Math.floor(number / 12), Math.ceil(((number % 12) + 1) / 2), ((number % 12) % 2) + 1, number + 1];
}
// Initialize points array
var roi = imp.getRoi();
if (roi == null || !(roi instanceof PointRoi)) {
    IJ.error("Please use the multi-point tool to select starting points.");
}
points = roi.getContainedPoints(); // Returns an array of points [{x: ..., y: ...}, ...]
//program loop
if (points.length === 0) {
    IJ.error("No valid multi-point selections found.");
} else {
    for (i = 0; i < points.length; i++) {
        //reset width and height variables
        width = 0;
        height = 0;
        px = 0;
        nx = 1000000000;
        py = 0;
        ny = 1000000000;
        checkedList = [];
        startX = points[i].x, startY = points[i].y;
        recursiveSelect(startX, startY);
    }
}
