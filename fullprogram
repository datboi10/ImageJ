//generic imports
importClass(Packages.ij.IJ);
importClass(Packages.ij.plugin.frame.RoiManager);
importClass(Packages.ij.gui.GenericDialog);
//generic image variable assignment
imp = IJ.getImage();
ip = imp.getProcessor();
//recursive bounding box function
function recursiveSelect(startX, startY) {
    //create dialog box
    if (startX == null || startY == null) {
        title = "Enter point";
        y=imp.height/2; x=imp.width/2;
        gd = new GenericDialog("Example Dialog");
        gd.addNumericField("X:", x);
        gd.addNumericField("Y:", y);
        gd.showDialog();
        x = gd.getNextNumber();
        y = gd.getNextNumber();
    } else {
        x = startX;
        y = startY;
    }
    //recursive function to fill in bounding box
    recursiveFill(x, y);
    print(px + " " + nx + " " + py + " " + ny);
    imp.setRoi(nx, ny, px-nx., py-ny);
    imp.updateAndDraw();
}
//recursive function to fill in bounding box
function recursiveFill(x, y) {
    //check if pixel is white
    if (ip.get(x, y) < 250) {
        IJ.log("Starting point is not a white pixel (value >= 250)");
        IJ.log(ip.get(x, y).toString());
        j =+ 1;
        IJ.log(j);
        IJ.log(x);
        IJ.log(y);
        return;
    }
    //check if pixel is already checked
    //if (arrayContains(checkedList, [x, y])) {
    //    j =+ 1;
    //    IJ.log(j);
    //    IJ.log(x);
    //    IJ.log(y);
    //    return;
    //}
    //add point to list of checked points
    checkedList.push([x, y]);
    //fill in pixel
    ip.set(x, y, 128);
    j =+ 1;
    IJ.log(j);
    IJ.log(x);
    IJ.log(y);
    //update point variables if the value is more extreem than the current value
    if (x > px) {
        px = x;
    }
    if (x < nx) {
        nx = x;
    }
    if (y > py) {
        py = y;
    }
    if (y < ny) {
        ny = y;
    }
    recursiveFill(x+2, y+1);
    recursiveFill(x-2, y-1);
    recursiveFill(x-1, y+2);
    recursiveFill(x+1, y-2);
}
//function to output image index number to append to log message
function imageIndex(number){
    return[Math.floor(number / 12), Math.ceil(((number % 12) + 1) / 2), ((number % 12) % 2) + 1, number + 1];
}
//toggle function for even and odd numbers
function evenOdd(n) {
    return n % 2 === 0 ? 1 : -1;
}
//check list for a tuple
function arrayContains(checkedList, targetArray) {
    for (k = 0; k < checkedList.length; k++) {
        if (checkedList[k][0] === targetArray[0] && checkedList[k][1] === targetArray[1]) {
            return true;
        }
    }
    return false;
}
// Initialize points array
var roi = imp.getRoi();
if (roi == null || !(roi instanceof PointRoi)) {
    IJ.error("Please use the multi-point tool to select starting points.");
}
points = roi.getContainedPoints(); // Returns an array of points [{x: ..., y: ...}, ...]
//program loop
if (points.length === 0) {
    IJ.error("No valid multi-point selections found.");
} else {
    for (i = 0; i < points.length; i++) {
        //reset width and height variables
        width = 0;
        height = 0;
        px = 0;
        nx = 1000000000;
        py = 0;
        ny = 1000000000;
        checkedList = [];
        startX = points[i].x, startY = points[i].y;
        recursiveSelect(startX, startY);
        IJ.log(checkedList)
    }
    IJ.log("run")
}
